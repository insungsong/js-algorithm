//1번 문제
// 100이하의 자연수 A, B, C를 입력받아 세 수 중 가장 작은 값을 출력하는 프로그램을 작성하 세요.(정렬을 사용하면 안됩니다)
// ▣ 입력설명
// 첫 번째 줄에 100이하의 세 자연수가 입력된다.
// ▣ 출력설명
// 첫 번째 줄에 가장 작은 수를 출력한다.
// ▣ 입력예제 1
//  6 5 11
// ▣ 출력예제 1
// 5
//1번 문제 풀이
// function solution(a, b, c) {
//   let answer;

//   if (a < b) {
//     answer = a;
//   } else {
//     answer = b;
//   }

//   if (answer > c) {
//     answer = c;
//   }
//   return answer;
// }
// console.log(solution(3, 1, 4));

//----------------------------------------------------------------------------------------------------------------

//2번 문제 삼각형 판별하기
// 길이가 서로 다른 A, B, C 세 개의 막대 길이가 주어지면 이 세 막대로 삼각형을 만들 수 있 으면 “YES"를 출력하고, 만들 수 없으면 ”NO"를 출력한다.
// 그 어떤 삼각형도 어느 한 변의 길이가 나머지 두 변의 길이를 합한 것보다 길거나 같을 수 없다
// ▣ 입력설명
// 첫 번째 줄에 100이하의 서로 다른 A, B, C 막대의 길이가 주어진다.
// ▣ 출력설명
// 첫 번째 줄에 “YES", "NO"를 출력한다.
// ▣ 입력예제 1
// 6 7 11
// ▣ 출력예제 1
// YES
// ▣ 입력예제 1
// 13 33 17
// ▣ 출력예제 1
// NO

// function solution(a, b, c) {
//   let answer = "YES",
//     max;

// 내가 푼 방식
//   if (a + b <= c || b + c <= a || a + c <= b) {
//     answer = "NO";
//   }

//해설자가 푼 방식
//   let total = a + b + c;

//   if (a < b) max = b;
//   else max = a;
//   if (max < c) max = c;

//   if (total - max <= max) {
//     answer = "NO";
//   }

//   return answer;
// }

// console.log(solution(6, 7, 11));
// console.log(solution(13, 33, 17));

//----------------------------------------------------------------------------------------------------------------

//3번 문제
// 연필 1 다스는 12자루입니다. 학생 1인당 연필을 1자루씩 나누어 준다고 할 때 N명이 학생수 를 입력하면 필요한 연필의 다스 수를 계산하는 프로그램을 작성하세요.
// ▣ 입력설명
// 첫 번째 줄에 1000 이하의 자연수 N이 입력된다.
// ▣ 출력설명
// 첫 번째 줄에 필요한 다스 수를 출력합니다.
// ▣ 입력예제 1
//  25
// ▣ 출력예제 1
//  3
// ▣ 입력예제 2
//  178
// ▣ 출력예제 2
//  15

// 문제 풀이
// function solution(n) {
//   n = 학생수
//   let answer;
// 1번 방법
//   answer = Math.ceil(n / 12);
// 2번 방법
//   if (n % 12 !== 0) {
//     answer = n / 12 + 1;
//   } else {
//     answer = n / 12;
//   }
//   answer = Math.floor(answer);
//   return answer;
// }
// console.log(solution(178));

//----------------------------------------------------------------------------------------------------------------

//4번 문제
// 자연수 N이 입력되면 1부터 N까지의 합을 출력하는 프로그램을 작성하세요.
// ▣ 입력설명
// 첫 번째 줄에 20이하의 자연수 N이 입력된다..
// ▣ 출력설명
// 첫 번째 줄에 1부터 N까지의 합을 출력한다.
// ▣ 입력예제 1
//  6
// ▣ 출력예제 1
//  21
//▣ 입력예제 2
//  10
//▣ 출력예제 2
//  55
// function solution(n) {
//   let answer = 0;

//   for (let i = 0; i <= n; i++) {
//     answer += i;
//   }

//   return answer;
// }

// console.log(solution(10));

//----------------------------------------------------------------------------------------------------------------

//5번 문제
//7개의 수가 주어지면 그 숫자 중 가장 작은 수를 출력하는 프로그램을 작성하세요.
//▣ 입력설명
// 첫 번째 줄에 7개의 수가 주어진다.
// ▣ 출력설명
// 첫 번째 줄에 가장 작은 값을 출력한다.
// ▣ 입력예제 1
// 5 3 7 11 2 15 17
// ▣ 출력예제 1
//2

// function solution(arr) {
//   let answer,
//     min = Number.MAX_SAFE_INTEGER;

// 내가 푼 풀이
//   arr.map((item, index) => {
//     if (index === 0) {
//       min = item;
//     }
//     if (min > item) {
//       min = item;
//     }
//   });
//   answer = min;
//   return answer;

//   for (let i = 0; i < arr.length; i++) {
//     if (arr[i] < min) {
//       min = arr[i];
//     }
//   }
//   answer = min;
//   return answer;
// }

// let arr = [5, 3, 7, 11, 2, 15, 17];
// console.log(solution(arr));

//----------------------------------------------------------------------------------------------------------------

//6번 문제 - 홀수
//7개의 자연수가 주어질 때, 이들 중 홀수인 자연수들을 모두 골라 그 합을 구하고, 고른 홀수들 중 최소값을 찾는 프로그램을 작성하세요.
//예를 들어, 7개의 자연수 12, 77, 38, 41, 53, 92, 85가 주어지면 이들 중 홀수는 77, 41, 53,85이므로 그 합은
//77 + 41 + 53 + 85 = 256 이 되고,
//41 < 53 < 77 < 85
//이므로 홀수들 중 최소값은 41이 된다.
// ▣ 입력설명
// 첫 번째 줄에 자연수 7개가 주어진다. 주어지는 자연수는 100보다 작다. 홀수가 한 개 이상 반드시 존재한다.
// ▣ 출력설명
// 첫째 줄에 홀수들의 합을 출력하고, 둘째 줄에 홀수들 중 최소값을 출력한다.
// ▣ 입력예제 1
// 12 77 38 41 53 92 85
// ▣ 출력예제 1
// 256
// 41
// 문제 풀이
// function solution(arr) {
//   let answer = [];
//   let sum = 0,
// min = Number.MAX_SAFE_INTEGER;

// 나의 풀이
//   for (let i = 0; i < arr.length; i++) {
//     if (arr[i] % 2 !== 0) {
//       sum += arr[i];
//   if (arr[i] < min) {
//     min = arr[i];
//   }
//     }
//   }

//   min = Math.min(...arr);

// 해설자 풀이
//   for (i of arr) {
//     if (i % 2 === 1) {
//       sum += i;
//       if (i < min) {
//         min = i;
//       }
//     }
//   }

//   answer.push(sum);
//   answer.push(min);
//   return answer;
// }
// arr = [12, 77, 38, 41, 53, 92, 85];
// console.log(solution(arr));

//----------------------------------------------------------------------------------------------------------------

//7번 문제 - 10부제
// 서울시는 6월 1일부터 교통 혼잡을 막기 위해서 자동차 10부제를 시행한다.
//자동차 10부제는 자동차 번호의 일의 자리 숫자와 날짜의 일의 자리 숫자가 일치하면 해당 자동차의 운행을 금지하는 것이다.
//예를 들어, 자동차 번호의 일의 자리 숫자가 7이면 7일, 17일, 27일에 운행하지 못한다.
//또한, 자동차 번호의 일의 자리 숫자가 0이면 10일, 20일, 30일에 운행하지 못한다.
// 여러분들은 일일 경찰관이 되어 10부제를 위반하는 자동차의 대수를 세는 봉사활동을 하려고 한다.
//날짜의 일의 자리 숫자가 주어지고 7대의 자동차 번호의 끝 두 자리 수가 주어졌을 때 위반하는 자동차의 대수를 출력하는 프로그램을 작성하세요.
// ▣ 입력설명
// 첫 줄에는 날짜의 일의 자리 숫자가 주어지고 두 번째 줄에는 7대의 자동차 번호의 끝 두 자 리 숫자가 주어진다.
// ▣ 출력설명
// 주어진 날짜와 자동차의 일의 자리 숫자를 보고 10부제를 위반하는 차량의 대수를 출력합니다.
// ▣ 입력예제 1
// 3
// 25 23 11 47 53 17 33
// ▣ 출력예제 1
// 3
// ▣ 입력예제 2
// 0
// 12 20 54 30 87 91 30
// ▣ 출력예제 2
// 3

// function solution(day, arr) {
//   let answer = 0;

// 나의 풀이
//   for (let x of arr) {
//     let s = x.toString();

//     if (Number(s[1]) === day) {
//       answer += 1;
//     }
//   }

//해설자의 풀이
//   for (let x of arr) {
//     if (x % 10 === day) answer++;
//   }

//   console.log(answer);
// }
// arr = [25, 23, 11, 47, 53, 17, 33];
// console.log(solution(3, arr));

//----------------------------------------------------------------------------------------------------------------

//forEach, map, filter, reduce

// let arr = [10, 11, 12, 13, 14, 15];
//forEach
// arr.forEach(
//   function (item, sub) {
//     console.log(this);
//   },
//   [1, 2]
// );

//map
// let answer = arr.map(
//   function (v, i) {
//     return v * v;
//   },
//   [1, 2]
// );
// let answer = arr.map((item) => {
//   return item % 2 === 0;
// });
// console.log("answer:", answer);

//filter
// let answer = arr.filter((item) => {
//   return item % 2 === 0;
// });
// console.log("answer:", answer);

//reduce
// let answer = arr.reduce((result, item) => {
//배열을 생성하는것이 아니라 어떤값을 return한다.
//x는 ,1이라고 선언했으니까 처음에는 1이된다.
//y는 배열의 첫번재 값이다 여기서는 10
//그리고 return으로 x+y를 했다. 이것은 x가 가지는 값이되고
//y에는 두번재 배열값이 오는 방식이다.

//   console.log("result + item: ", result + item);

//   return result + item;
// });
// console.log("answer:", answer);

//----------------------------------------------------------------------------------------------------------------
//8번 문제 - 일곱 난쟁이
//왕비를 피해 일곱 난쟁이들과 함께 평화롭게 생활하고 있던 백설공주에게 위기가 찾아왔다.
//일과를 마치고 돌아온 난쟁이가 일곱 명이 아닌 아홉 명이었던 것이다.
//아홉 명의 난쟁이는 모두 자신이 "백설 공주와 일곱 난쟁이"의 주인공이라고 주장했다.
//뛰어난 수학적 직관력을 가지고 있던 백설공주는, 다행스럽게도 일곱 난쟁이의 키의 합이 100이 됨을 기억해 냈다.
//아홉 난쟁이의 키가 주어졌을 때, 백설공주를 도와 일곱 난쟁이를 찾는 프로그램을 작성하시 오.
// ▣ 입력설명
// 아홉 개의 줄에 걸쳐 난쟁이들의 키가 주어진다. 주어지는 키는 100을 넘지 않는 자연수이며,
//아홉 난쟁이의 키는 모두 다르며, 가능한 정답이 여러 가지인 경우에는 아무거나 출력한다.
// ▣ 출력설명
// 입력된 순서대로 일곱 난쟁이의 키를 출력한다.
// ▣ 입력예제 1
// 20 7 23 19 10 15 25 8 13
// ▣ 출력예제 1
// 20 7 23 19 10 8 13

//문제 풀이
//결국: 배열에 들어온 값이 100이 될때까지만 더해야한다.
// function solution(arr) {
//   let answer = arr;
//   let sum = answer.reduce((result, arrItem) => result + arrItem, 0);
//   console.log("sum: ", sum);
//   for (let i = 0; i < 8; i++) {
//     for (let j = i + 1; j < 9; j++) {
//       if (sum - (answer[i] + answer[j]) === 100) {
//         console.log("answer[i]: ", answer[i]);
//         console.log("answer[j]: ", answer[j]);
//         answer.splice(j, 1);
//         answer.splice(i, 1);
//       }
//     }
//   }

//   return answer;
// }

// let arr = [20, 7, 23, 19, 10, 15, 25, 8, 13];
// console.log(solution(arr));
